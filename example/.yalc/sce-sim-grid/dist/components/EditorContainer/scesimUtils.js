"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDefinitions = exports.getRows = exports.getColumns = exports.getColumnNames = exports.getDmnFilePath = void 0;

var getDmnFilePath = function getDmnFilePath(data) {
  var dmnFilePath = data.value.simulation.simulationDescriptor.dmnFilePath;
  return dmnFilePath;
};

exports.getDmnFilePath = getDmnFilePath;

var getColumnNames = function getColumnNames(data) {
  var columns = [];
  var factMapping = data.value.simulation.simulationDescriptor.factMappings.factMapping;
  factMapping.forEach(function (col) {
    var name = col.expressionAlias || '';
    var group = col.factAlias || '';
    columns.push({
      name: name,
      group: group
    });
  });
  return columns;
};

exports.getColumnNames = getColumnNames;

var getColumns = function getColumns(data) {
  var byGroup = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var columnDefsOther = [];
  var columnDefsGiven = [];
  var columnDefsExpect = [];
  var numOther = 0;
  var numGiven = 0;
  var numExpect = 0;
  var fieldIndices = {};
  var factMapping = data.value.simulation.simulationDescriptor.factMappings.factMapping;
  factMapping.forEach(function (col, index) {
    var type = col.expressionIdentifier.type; // OTHER | GIVEN | EXPECT

    var field = col.expressionIdentifier.name; // this relates the column to the row cell

    fieldIndices[field] = index;

    if (type === "OTHER") {
      numOther = numOther + 1;
      var name = col.factAlias;
      columnDefsOther.push({
        name: name,
        field: field
      });
    } else {
      var _name = col.expressionAlias;
      var group = col.factAlias;

      if (!byGroup) {
        if (type === "GIVEN") {
          numGiven = numGiven + 1;
          columnDefsGiven.push({
            name: _name,
            field: field,
            group: group
          });
        } else {
          // EXPECT
          numExpect = numExpect + 1;
          columnDefsExpect.push({
            name: _name,
            field: field,
            group: group
          });
        }
      } else {
        if (type === "GIVEN") {
          numGiven = numGiven + 1; // check if the group already exists, if so push to it, otherwise create a new group

          if (columnDefsGiven.length === 0 || columnDefsGiven[columnDefsGiven.length - 1].group !== group) {
            // new group
            columnDefsGiven.push({
              group: group,
              children: [{
                name: _name,
                field: field
              }]
            });
          } else {
            // push to last group
            columnDefsGiven[columnDefsGiven.length - 1].children.push({
              name: _name,
              field: field
            });
          }
        } else {
          // EXPECT
          numExpect = numExpect + 1; // check if the group already exists, if so push to it, otherwise create a new group

          if (columnDefsExpect.length === 0 || columnDefsExpect[columnDefsExpect.length - 1].group !== group) {
            // new group
            columnDefsExpect.push({
              group: group,
              children: [{
                name: _name,
                field: field
              }]
            });
          } else {
            // push to last group
            columnDefsExpect[columnDefsExpect.length - 1].children.push({
              name: _name,
              field: field
            });
          }
        }
      }
    }
  });
  return {
    fieldIndices: fieldIndices,
    other: columnDefsOther,
    given: columnDefsGiven,
    expect: columnDefsExpect,
    numOther: numOther,
    numGiven: numGiven,
    numExpect: numExpect
  };
};

exports.getColumns = getColumns;

var getRows = function getRows(data, columns) {
  // construct the path so we can save back to the same location in the json file
  var dataPathRoot = 'value.simulation.scenarios.scenario';
  var rows = [];
  var scenario = data.value.simulation.scenarios.scenario;
  scenario.forEach(function (dataRow, index) {
    var dataPath = "".concat(dataPathRoot, "[").concat(index, "].factMappingValues.factMappingValue");
    var totalColumnsLength = columns.numOther + columns.numGiven + columns.numExpect;
    var hasExpressionIdentifierName = true; // create the row with a predetermined length so we can insert the cell in the correct column order

    var row = Array.from(Array(totalColumnsLength).keys());
    var entries = dataRow.factMappingValues.factMappingValue;
    entries.forEach(function (col, index) {
      var name = col.expressionIdentifier.name;
      var path = "".concat(dataPath, "[").concat(index, "].rawValue.value");

      if (!col.rawValue) {
        if (name) {
          row[columns.fieldIndices[name]] = {
            value: null,
            path: path
          };
        } else {
          hasExpressionIdentifierName = false;
          row[index] = {
            value: null,
            path: path
          };
        }
      } else {
        var value = col.rawValue.value;

        if (name) {
          row[columns.fieldIndices[name]] = {
            value: value,
            path: path
          };
        } else {
          hasExpressionIdentifierName = false;
          row[index] = {
            value: value,
            path: path
          };
        }
      }
    });

    if (!hasExpressionIdentifierName && row.length) {
      // this might be a workaround, but one of the scesim datasets did not have expressionIdentifier.name for the simulations
      // and for some reason the last item is the index, it should be at the front
      if (row.length) {
        row.unshift(row.pop());
      }
    }

    rows.push(row);
  });
  return rows;
};

exports.getRows = getRows;

var getDefinitions = function getDefinitions(data) {
  var definitions = {};
  var title = data.value.name;
  var itemDefinition = data.value.itemDefinition;
  itemDefinition.forEach(function (def) {
    // let definitionName = def.name.substring(1);
    var definitionTypes = {};
    var itemComponent = def.itemComponent;
    itemComponent.forEach(function (type) {
      if (type.allowedValues) {
        // enumeration
        definitionTypes[type.name] = type.allowedValues.text;
      } else {
        definitionTypes[type.name] = type.typeRef;
      }
    });
    definitions[def.name] = definitionTypes;
  });
  var drgElement = data.value.drgElement;
  var typeDefinitions = {
    '_title': title,
    simple: [],
    complex: [],
    map: {}
  };
  drgElement.forEach(function (element) {
    var type = element.name.localPart; // inputData | decision

    var text = element.value.name;
    var question = element.value.question;
    var choices = element.value.allowedAnswers || null;
    var typeRef = element.value.variable.typeRef; // e.g. tViolation, tFine, tDriver, string

    typeDefinitions[typeRef.charAt(0) === 't' ? 'complex' : 'simple'].push({
      typeRef: typeRef,
      type: type,
      text: text,
      choices: choices,
      question: question,
      elements: definitions[typeRef] || {
        value: choices
      }
    });
    typeDefinitions.map[text] = definitions[typeRef] || {
      value: choices
    };
  });
  return typeDefinitions;
};

exports.getDefinitions = getDefinitions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvckNvbnRhaW5lci9zY2VzaW1VdGlscy50cyJdLCJuYW1lcyI6WyJnZXREbW5GaWxlUGF0aCIsImRhdGEiLCJkbW5GaWxlUGF0aCIsInZhbHVlIiwic2ltdWxhdGlvbiIsInNpbXVsYXRpb25EZXNjcmlwdG9yIiwiZ2V0Q29sdW1uTmFtZXMiLCJjb2x1bW5zIiwiZmFjdE1hcHBpbmciLCJmYWN0TWFwcGluZ3MiLCJmb3JFYWNoIiwiY29sIiwibmFtZSIsImV4cHJlc3Npb25BbGlhcyIsImdyb3VwIiwiZmFjdEFsaWFzIiwicHVzaCIsImdldENvbHVtbnMiLCJieUdyb3VwIiwiY29sdW1uRGVmc090aGVyIiwiY29sdW1uRGVmc0dpdmVuIiwiY29sdW1uRGVmc0V4cGVjdCIsIm51bU90aGVyIiwibnVtR2l2ZW4iLCJudW1FeHBlY3QiLCJmaWVsZEluZGljZXMiLCJpbmRleCIsInR5cGUiLCJleHByZXNzaW9uSWRlbnRpZmllciIsImZpZWxkIiwibGVuZ3RoIiwiY2hpbGRyZW4iLCJvdGhlciIsImdpdmVuIiwiZXhwZWN0IiwiZ2V0Um93cyIsImRhdGFQYXRoUm9vdCIsInJvd3MiLCJzY2VuYXJpbyIsInNjZW5hcmlvcyIsImRhdGFSb3ciLCJkYXRhUGF0aCIsInRvdGFsQ29sdW1uc0xlbmd0aCIsImhhc0V4cHJlc3Npb25JZGVudGlmaWVyTmFtZSIsInJvdyIsIkFycmF5IiwiZnJvbSIsImtleXMiLCJlbnRyaWVzIiwiZmFjdE1hcHBpbmdWYWx1ZXMiLCJmYWN0TWFwcGluZ1ZhbHVlIiwicGF0aCIsInJhd1ZhbHVlIiwidW5zaGlmdCIsInBvcCIsImdldERlZmluaXRpb25zIiwiZGVmaW5pdGlvbnMiLCJ0aXRsZSIsIml0ZW1EZWZpbml0aW9uIiwiZGVmIiwiZGVmaW5pdGlvblR5cGVzIiwiaXRlbUNvbXBvbmVudCIsImFsbG93ZWRWYWx1ZXMiLCJ0ZXh0IiwidHlwZVJlZiIsImRyZ0VsZW1lbnQiLCJ0eXBlRGVmaW5pdGlvbnMiLCJzaW1wbGUiLCJjb21wbGV4IiwibWFwIiwiZWxlbWVudCIsImxvY2FsUGFydCIsInF1ZXN0aW9uIiwiY2hvaWNlcyIsImFsbG93ZWRBbnN3ZXJzIiwidmFyaWFibGUiLCJjaGFyQXQiLCJlbGVtZW50cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVPLElBQU1BLGNBQWMsR0FBRyxTQUFqQkEsY0FBaUIsQ0FBQ0MsSUFBRCxFQUEwQjtBQUFBLE1BRXBEQyxXQUZvRCxHQUdsREQsSUFBSSxDQUFDRSxLQUFMLENBQVdDLFVBQVgsQ0FBc0JDLG9CQUg0QixDQUVwREgsV0FGb0Q7QUFJdEQsU0FBT0EsV0FBUDtBQUNELENBTE07Ozs7QUFPQSxJQUFNSSxjQUFjLEdBQUcsU0FBakJBLGNBQWlCLENBQUNMLElBQUQsRUFBa0I7QUFDOUMsTUFBSU0sT0FBYyxHQUFHLEVBQXJCO0FBRDhDLE1BRzVDQyxXQUg0QyxHQUkxQ1AsSUFBSSxDQUFDRSxLQUFMLENBQVdDLFVBQVgsQ0FBc0JDLG9CQUF0QixDQUEyQ0ksWUFKRCxDQUc1Q0QsV0FINEM7QUFLOUNBLEVBQUFBLFdBQVcsQ0FBQ0UsT0FBWixDQUNFLFVBQUNDLEdBQUQsRUFBc0I7QUFDcEIsUUFBSUMsSUFBSSxHQUFHRCxHQUFHLENBQUNFLGVBQUosSUFBdUIsRUFBbEM7QUFDQSxRQUFJQyxLQUFLLEdBQUdILEdBQUcsQ0FBQ0ksU0FBSixJQUFpQixFQUE3QjtBQUNBUixJQUFBQSxPQUFPLENBQUNTLElBQVIsQ0FBYTtBQUNYSixNQUFBQSxJQUFJLEVBQUpBLElBRFc7QUFFWEUsTUFBQUEsS0FBSyxFQUFMQTtBQUZXLEtBQWI7QUFJRCxHQVJIO0FBVUEsU0FBT1AsT0FBUDtBQUNELENBaEJNOzs7O0FBb0JBLElBQU1VLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQUNoQixJQUFELEVBQTRDO0FBQUEsTUFBN0JpQixPQUE2Qix1RUFBVixLQUFVO0FBQ3BFLE1BQUlDLGVBQXVCLEdBQUcsRUFBOUI7QUFDQSxNQUFJQyxlQUF1QixHQUFHLEVB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Q0EsUUFBTTRELFFBQVEsR0FBR0YsT0FBTyxDQUFDbkUsS0FBUixDQUFjcUUsUUFBL0I7QUFDQSxRQUFNQyxPQUFPLEdBQUdILE9BQU8sQ0FBQ25FLEtBQVIsQ0FBY3VFLGNBQWQsSUFBZ0MsSUFBaEQ7QUFDQSxRQUFNVixPQUFPLEdBQUdNLE9BQU8sQ0FBQ25FLEtBQVIsQ0FBY3dFLFFBQWQsQ0FBdUJYLE9BQXZDLENBTG1DLENBS2E7O0FBQ2hERSxJQUFBQSxlQUFlLENBQUNGLE9BQU8sQ0FBQ1ksTUFBUixDQUFlLENBQWYsTUFBc0IsR0FBdEIsR0FBNEIsU0FBNUIsR0FBd0MsUUFBekMsQ0FBZixDQUFrRTVELElBQWxFLENBQ0U7QUFDRWdELE1BQUFBLE9BQU8sRUFBUEEsT0FERjtBQUVFckMsTUFBQUEsSUFBSSxFQUFKQSxJQUZGO0FBR0VvQyxNQUFBQSxJQUFJLEVBQUpBLElBSEY7QUFJRVUsTUFBQUEsT0FBTyxFQUFQQSxPQUpGO0FBS0VELE1BQUFBLFFBQVEsRUFBUkEsUUFMRjtBQU1FSyxNQUFBQSxRQUFRLEVBQUVyQixXQUFXLENBQUNRLE9BQUQsQ0FBWCxJQUF3QjtBQUNoQzdELFFBQUFBLEtBQUssRUFBRXNFO0FBRHlCO0FBTnBDLEtBREY7QUFZQVAsSUFBQUEsZUFBZSxDQUFDRyxHQUFoQixDQUFvQk4sSUFBcEIsSUFBNEJQLFdBQVcsQ0FBQ1EsT0FBRCxDQUFYLElBQXdCO0FBQ2xEN0QsTUFBQUEsS0FBSyxFQUFFc0U7QUFEMkMsS0FBcEQ7QUFHRCxHQXJCRDtBQXNCQSxTQUFPUCxlQUFQO0FBQ0QsQ0FqRE0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTY2VzaW0sIEZhY3RNYXBwaW5nIH0gZnJvbSAnLi4vLi4vdHlwZXMvU2NlU2ltJztcblxuZXhwb3J0IGNvbnN0IGdldERtbkZpbGVQYXRoID0gKGRhdGE6IFNjZXNpbSk6IHN0cmluZyA9PiB7XG4gIGNvbnN0IHtcbiAgICBkbW5GaWxlUGF0aFxuICB9ID0gZGF0YS52YWx1ZS5zaW11bGF0aW9uLnNpbXVsYXRpb25EZXNjcmlwdG9yO1xuICByZXR1cm4gZG1uRmlsZVBhdGg7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0Q29sdW1uTmFtZXMgPSAoZGF0YTogU2Nlc2ltKSA9PiB7XG4gIGxldCBjb2x1bW5zOiBhbnlbXSA9IFtdO1xuICBjb25zdCB7XG4gICAgZmFjdE1hcHBpbmdcbiAgfSA9IGRhdGEudmFsdWUuc2ltdWxhdGlvbi5zaW11bGF0aW9uRGVzY3JpcHRvci5mYWN0TWFwcGluZ3M7XG4gIGZhY3RNYXBwaW5nLmZvckVhY2goXG4gICAgKGNvbDogRmFjdE1hcHBpbmcpID0+IHtcbiAgICAgIGxldCBuYW1lID0gY29sLmV4cHJlc3Npb25BbGlhcyB8fCAnJztcbiAgICAgIGxldCBncm91cCA9IGNvbC5mYWN0QWxpYXMgfHwgJyc7XG4gICAgICBjb2x1bW5zLnB1c2goe1xuICAgICAgICBuYW1lLFxuICAgICAgICBncm91cFxuICAgICAgfSk7XG4gICAgfVxuICApO1xuICByZXR1cm4gY29sdW1ucztcbn07XG5cbnR5cGUgQ29sdW1uID0gQXJyYXk8KHsgbmFtZT86IHN0cmluZzsgZmllbGQ/OiBzdHJpbmc7IGdyb3VwPzogc3RyaW5nOyBjaGlsZHJlbj86IHsgbmFtZT86IHN0cmluZzsgZmllbGQ/OiBzdHJpbmc7IH1bXTsgfSk+O1xuXG5leHBvcnQgY29uc3QgZ2V0Q29sdW1ucyA9IChkYXRhOiBTY2VzaW0sIGJ5R3JvdXA6IGJvb2xlYW4gPSBmYWxzZSkgPT4ge1xuICBsZXQgY29sdW1uRGVmc090aGVyOiBDb2x1bW4gPSBbXTtcbiAgbGV0IGNvbHVtbkRlZnNHaXZlbjogQ29sdW1uID0gW107XG4gIGxldCBjb2x1bW5EZWZzRXhwZWN0OiBDb2x1bW4gPSBbXTtcbiAgbGV0IG51bU90aGVyOiBudW1iZXIgPSAwO1xuICBsZXQgbnVtR2l2ZW46IG51bWJlciA9IDA7XG4gIGxldCBudW1FeHBlY3Q6IG51bWJlciA9IDA7XG4gIGxldCBmaWVsZEluZGljZXM6IGFueSA9IHt9O1xuICBjb25zdCB7XG4gICAgZmFjdE1hcHBpbmdcbiAgfSA9IGRhdGEudmFsdWUuc2ltdWxhdGlvbi5zaW11bGF0aW9uRGVzY3JpcHRvci5mYWN0TWFwcGluZ3M7XG4gIGZhY3RNYXBwaW5nLmZvckVhY2goXG4gICAgKGNvbDogRmFjdE1hcHBpbmcsIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgIGNvbnN0IHR5cGUgPSBjb2wuZXhwcmVzc2lvbklkZW50aWZpZXIudHlwZTsgLy8gT1RIRVIgfCBHSVZFTiB8IEVYUEVDVFxuICAgICAgY29uc3QgZmllbGQgPSBjb2wuZXhwcmVzc2lvbklkZW50aWZpZXIubmFtZTsgLy8gdGhpcyByZWxhdGVzIHRoZSBjb2x1bW4gdG8gdGhlIHJvdyBjZWxsXG4gICAgICBmaWVsZEluZGljZXNbZmllbGRdID0gaW5kZXg7XG4gICAgICBpZiAodHlwZSA9PT0gXCJPVEhFUlwiKSB7XG4gICAgICAgIG51bU90aGVyID0gbnVtT3RoZXIgKyAxO1xuICAgICAgICBjb25zdCBuYW1lID0gY29sLmZhY3RBbGlhcztcbiAgICAgICAgY29sdW1uRGVmc090aGVyLnB1c2goeyBuYW1lLCBmaWVsZCB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBjb2wuZXhwcmVzc2lvbkFsaWFzO1xuICAgICAgICBjb25zdCBncm91cCA9IGNvbC5mYWN0QWxpYXM7XG4gICAgICAgIGlmICghYnlHcm91cCkge1xuICAgICAgICAgIGlmICh0eXBlID09PSBcIkdJVkVOXCIpIHtcbiAgICAgICAgICAgIG51bUdpdmVuID0gbnVtR2l2ZW4gKyAxO1xuICAgICAgICAgICAgY29sdW1uRGVmc0dpdmVuLnB1c2goeyBuYW1lLCBmaWVsZCwgZ3JvdXAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEVYUEVDVFxuICAgICAgICAgICAgbnVtRXhwZWN0ID0gbnVtRXhwZWN0ICsgMTtcbiAgICAgICAgICAgIGNvbHVtbkRlZnNFeHBlY3QucHVzaCh7IG5hbWUsIGZpZWxkLCBncm91cCB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHR5cGUgPT09IFwiR0lWRU5cIikge1xuICAgICAgICAgICAgbnVtR2l2ZW4gPSBudW1HaXZlbiArIDE7XG4gICAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgZ3JvdXAgYWxyZWFkeSBleGlzdHMsIGlmIHNvIHB1c2ggdG8gaXQsIG90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZ3JvdXBcbiAgICAgICAgICAgIGlmIChjb2x1bW5EZWZzR2l2ZW4ubGVuZ3RoID09PSAwIHx8IGNvbHVtbkRlZnNHaXZlbltjb2x1bW5EZWZzR2l2ZW4ubGVuZ3RoIC0gMV0uZ3JvdXAgIT09IGdyb3VwKSB7XG4gICAgICAgICAgICAgIC8vIG5ldyBncm91cFxuICAgICAgICAgICAgICBjb2x1bW5EZWZzR2l2ZW4ucHVzaCh7IGdyb3VwLCBjaGlsZHJlbjogW3sgbmFtZSwgZmllbGQgfV0gfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBwdXNoIHRvIGxhc3QgZ3JvdXBcbiAgICAgICAgICAgICAgY29sdW1uRGVmc0dpdmVuW2NvbHVtbkRlZnNHaXZlbi5sZW5ndGggLSAxXS5jaGlsZHJlbiEucHVzaCh7IG5hbWUsIGZpZWxkIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEVYUEVDVFxuICAgICAgICAgICAgbnVtRXhwZWN0ID0gbnVtRXhwZWN0ICsgMTtcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBncm91cCBhbHJlYWR5IGV4aXN0cywgaWYgc28gcHVzaCB0byBpdCwgb3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBncm91cFxuICAgICAgICAgICAgaWYgKGNvbHVtbkRlZnNFeHBlY3QubGVuZ3RoID09PSAwIHx8IGNvbHVtbkRlZnNFeHBlY3RbY29sdW1uRGVmc0V4cGVjdC5sZW5ndGggLSAxXS5ncm91cCAhPT0gZ3JvdXApIHtcbiAgICAgICAgICAgICAgLy8gbmV3IGdyb3VwXG4gICAgICAgICAgICAgIGNvbHVtbkRlZnNFeHBlY3QucHVzaCh7IGdyb3VwLCBjaGlsZHJlbjogW3sgbmFtZSwgZmllbGQgfV0gfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBwdXNoIHRvIGxhc3QgZ3JvdXBcbiAgICAgICAgICAgICAgY29sdW1uRGVmc0V4cGVjdFtjb2x1bW5EZWZzRXhwZWN0Lmxlbmd0aCAtIDFdLmNoaWxkcmVuIS5wdXNoKHsgbmFtZSwgZmllbGQgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICk7XG4gIHJldHVybiB7XG4gICAgZmllbGRJbmRpY2VzLFxuICAgIG90aGVyOiBjb2x1bW5EZWZzT3RoZXIsXG4gICAgZ2l2ZW46IGNvbHVtbkRlZnNHaXZlbixcbiAgICBleHBlY3Q6IGNvbHVtbkRlZnNFeHBlY3QsXG4gICAgbnVtT3RoZXIsXG4gICAgbnVtR2l2ZW4sXG4gICAgbnVtRXhwZWN0XG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0Um93cyA9IChkYXRhOiBTY2VzaW0sIGNvbHVtbnM/OiBhbnkpID0+IHtcbiAgLy8gY29uc3RydWN0IHRoZSBwYXRoIHNvIHdlIGNhbiBzYXZlIGJhY2sgdG8gdGhlIHNhbWUgbG9jYXRpb24gaW4gdGhlIGpzb24gZmlsZVxuICBjb25zdCBkYXRhUGF0aFJvb3Q6IHN0cmluZyA9ICd2YWx1ZS5zaW11bGF0aW9uLnNjZW5hcmlvcy5zY2VuYXJpbyc7XG4gIGNvbnN0IHJvd3M6IGFueVtdID0gW107XG4gIGNvbnN0IHsgc2NlbmFyaW8gfSA9IGRhdGEudmFsdWUuc2ltdWxhdGlvbi5zY2VuYXJpb3M7XG4gIHNjZW5hcmlvLmZvckVhY2goXG4gICAgKGRhdGFSb3c6IHsgZmFjdE1hcHBpbmdWYWx1ZXM6IHsgZmFjdE1hcHBpbmdWYWx1ZTogYW55IH0gfSwgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgY29uc3QgZGF0YVBhdGggPSBgJHtkYXRhUGF0aFJvb3R9WyR7aW5kZXh9XS5mYWN0TWFwcGluZ1ZhbHVlcy5mYWN0TWFwcGluZ1ZhbHVlYDtcbiAgICAgIGNvbnN0IHRvdGFsQ29sdW1uc0xlbmd0aCA9IGNvbHVtbnMubnVtT3RoZXIgKyBjb2x1bW5zLm51bUdpdmVuICsgY29sdW1ucy5udW1FeHBlY3Q7XG4gICAgICBsZXQgaGFzRXhwcmVzc2lvbklkZW50aWZpZXJOYW1lID0gdHJ1ZTtcbiAgICAgIC8vIGNyZWF0ZSB0aGUgcm93IHdpdGggYSBwcmVkZXRlcm1pbmVkIGxlbmd0aCBzbyB3ZSBjYW4gaW5zZXJ0IHRoZSBjZWxsIGluIHRoZSBjb3JyZWN0IGNvbHVtbiBvcmRlclxuICAgICAgbGV0IHJvdzogYW55W10gPSBBcnJheS5mcm9tKEFycmF5KHRvdGFsQ29sdW1uc0xlbmd0aCkua2V5cygpKTtcbiAgICAgIGNvbnN0IGVudHJpZXMgPSBkYXRhUm93LmZhY3RNYXBwaW5nVmFsdWVzLmZhY3RNYXBwaW5nVmFsdWU7XG4gICAgICBlbnRyaWVzLmZvckVhY2goKGNvbDogeyByYXdWYWx1ZT86IHsgdmFsdWU6IGFueSB9LCBleHByZXNzaW9uSWRlbnRpZmllcjogeyBuYW1lOiBzdHJpbmcgfSB9LCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgbmFtZSB9ID0gY29sLmV4cHJlc3Npb25JZGVudGlmaWVyO1xuICAgICAgICBjb25zdCBwYXRoID0gYCR7ZGF0YVBhdGh9WyR7aW5kZXh9XS5yYXdWYWx1ZS52YWx1ZWA7XG4gICAgICAgIGlmICghY29sLnJhd1ZhbHVlKSB7XG4gICAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgIHJvd1tjb2x1bW5zLmZpZWxkSW5kaWNlc1tuYW1lXV0gPSB7XG4gICAgICAgICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICAgICAgICBwYXRoXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoYXNFeHByZXNzaW9uSWRlbnRpZmllck5hbWUgPSBmYWxzZTtcbiAgICAgICAgICAgIHJvd1tpbmRleF0gPSB7XG4gICAgICAgICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICAgICAgICBwYXRoXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCB7IHZhbHVlIH0gPSBjb2wucmF3VmFsdWU7XG4gICAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgIHJvd1tjb2x1bW5zLmZpZWxkSW5kaWNlc1tuYW1lXV0gPSB7XG4gICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICBwYXRoXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoYXNFeHByZXNzaW9uSWRlbnRpZmllck5hbWUgPSBmYWxzZTtcbiAgICAgICAgICAgIHJvd1tpbmRleF0gPSB7XG4gICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICBwYXRoXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoIWhhc0V4cHJlc3Npb25JZGVudGlmaWVyTmFtZSAmJiByb3cubGVuZ3RoKSB7XG4gICAgICAgIC8vIHRoaXMgbWlnaHQgYmUgYSB3b3JrYXJvdW5kLCBidXQgb25lIG9mIHRoZSBzY2VzaW0gZGF0YXNldHMgZGlkIG5vdCBoYXZlIGV4cHJlc3Npb25JZGVudGlmaWVyLm5hbWUgZm9yIHRoZSBzaW11bGF0aW9uc1xuICAgICAgICAvLyBhbmQgZm9yIHNvbWUgcmVhc29uIHRoZSBsYXN0IGl0ZW0gaXMgdGhlIGluZGV4LCBpdCBzaG91bGQgYmUgYXQgdGhlIGZyb250XG4gICAgICAgIGlmIChyb3cubGVuZ3RoKSB7XG4gICAgICAgICAgcm93LnVuc2hpZnQocm93LnBvcCgpISlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcm93cy5wdXNoKHJvdyk7XG4gICAgfVxuICApO1xuICByZXR1cm4gcm93cztcbn07XG5cbmV4cG9ydCBjb25zdCBnZXREZWZpbml0aW9ucyA9IChkYXRhOiB7IHZhbHVlOiB7IGl0ZW1EZWZpbml0aW9uPzogYW55OyBkcmdFbGVtZW50PzogYW55OyBuYW1lPzogYW55OyB9OyB9KSA9PiB7XG4gIGxldCBkZWZpbml0aW9uczogYW55ID0ge307XG4gIGNvbnN0IHRpdGxlID0gZGF0YS52YWx1ZS5uYW1lO1xuICBjb25zdCB7IGl0ZW1EZWZpbml0aW9uIH0gPSBkYXRhLnZhbHVlO1xuICBpdGVtRGVmaW5pdGlvbi5mb3JFYWNoKChkZWY6IGFueSkgPT4ge1xuICAgIC8vIGxldCBkZWZpbml0aW9uTmFtZSA9IGRlZi5uYW1lLnN1YnN0cmluZygxKTtcbiAgICBsZXQgZGVmaW5pdGlvblR5cGVzID0ge30gYXMgYW55O1xuICAgIGNvbnN0IHsgaXRlbUNvbXBvbmVudCB9ID0gZGVmO1xuICAgIGl0ZW1Db21wb25lbnQuZm9yRWFjaCgodHlwZTogeyBuYW1lOiBhbnk7IHR5cGVSZWY6IGFueTsgYWxsb3dlZFZhbHVlcz86IGFueSB9KSA9PiB7XG4gICAgICBpZiAodHlwZS5hbGxvd2VkVmFsdWVzKSB7XG4gICAgICAgIC8vIGVudW1lcmF0aW9uXG4gICAgICAgIGRlZmluaXRpb25UeXBlc1t0eXBlLm5hbWVdID0gdHlwZS5hbGxvd2VkVmFsdWVzLnRleHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWZpbml0aW9uVHlwZXNbdHlwZS5uYW1lXSA9IHR5cGUudHlwZVJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBkZWZpbml0aW9uc1tkZWYubmFtZV0gPSBkZWZpbml0aW9uVHlwZXM7XG4gIH0pO1xuXG4gIGNvbnN0IHsgZHJnRWxlbWVudCB9ID0gZGF0YS52YWx1ZTtcbiAgY29uc3QgdHlwZURlZmluaXRpb25zOiBhbnkgPSB7XG4gICAgJ190aXRsZSc6IHRpdGxlLFxuICAgIHNpbXBsZTogW10sXG4gICAgY29tcGxleDogW10sXG4gICAgbWFwOiB7fVxuICB9O1xuICBkcmdFbGVtZW50LmZvckVhY2goKGVsZW1lbnQ6IGFueSkgPT4ge1xuICAgIGNvbnN0IHR5cGUgPSBlbGVtZW50Lm5hbWUubG9jYWxQYXJ0OyAvLyBpbnB1dERhdGEgfCBkZWNpc2lvblxuICAgIGNvbnN0IHRleHQgPSBlbGVtZW50LnZhbHVlLm5hbWU7XG4gICAgY29uc3QgcXVlc3Rpb24gPSBlbGVtZW50LnZhbHVlLnF1ZXN0aW9uO1xuICAgIGNvbnN0IGNob2ljZXMgPSBlbGVtZW50LnZhbHVlLmFsbG93ZWRBbnN3ZXJzIHx8IG51bGw7XG4gICAgY29uc3QgdHlwZVJlZiA9IGVsZW1lbnQudmFsdWUudmFyaWFibGUudHlwZVJlZjsgLy8gZS5nLiB0VmlvbGF0aW9uLCB0RmluZSwgdERyaXZlciwgc3RyaW5nXG4gICAgdHlwZURlZmluaXRpb25zW3R5cGVSZWYuY2hhckF0KDApID09PSAndCcgPyAnY29tcGxleCcgOiAnc2ltcGxlJ10ucHVzaChcbiAgICAgIHtcbiAgICAgICAgdHlwZVJlZixcbiAgICAgICAgdHlwZSxcbiAgICAgICAgdGV4dCxcbiAgICAgICAgY2hvaWNlcyxcbiAgICAgICAgcXVlc3Rpb24sXG4gICAgICAgIGVsZW1lbnRzOiBkZWZpbml0aW9uc1t0eXBlUmVmXSB8fCB7XG4gICAgICAgICAgdmFsdWU6IGNob2ljZXNcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gICAgdHlwZURlZmluaXRpb25zLm1hcFt0ZXh0XSA9IGRlZmluaXRpb25zW3R5cGVSZWZdIHx8IHtcbiAgICAgIHZhbHVlOiBjaG9pY2VzXG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiB0eXBlRGVmaW5pdGlvbnM7XG59XG4iXX0=