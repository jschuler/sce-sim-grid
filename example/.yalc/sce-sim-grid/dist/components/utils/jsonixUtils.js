"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setDmnFromJson = exports.getJsonFromDmn = exports.setSceSimFromJson = exports.getJsonFromSceSim = void 0;

var Jsonix = require('./jsonix').Jsonix; // Load the schema rules


var SceSimRules = require('../../rules/scesim').scesim;

var DmnRules = require('../../rules/dmn').dmn; // Construct a Jsonix context - a factory for unmarshaller (parser) and marshaller (serializer)


var sceSimContext = new Jsonix.Context([SceSimRules]);
var dmnContext = new Jsonix.Context([DmnRules]); // Create an unmarshaller (scesim => json)

var sceSimUnmarshaller = sceSimContext.createUnmarshaller();
var dmnUnmarshaller = dmnContext.createUnmarshaller(); // Create a marshaller (json => scesim)

var sceSimMarshaller = sceSimContext.createMarshaller();
var dmnMarshaller = dmnContext.createMarshaller();
/**
 * Convert a scesim XML string into JSON
 */

var getJsonFromSceSim = function getJsonFromSceSim(scesim) {
  var unmarshalled = sceSimUnmarshaller.unmarshalString(scesim); // console.log(unmarshalled);

  return unmarshalled;
};
/**
 * Convert JSON to scesim XML string
 */


exports.getJsonFromSceSim = getJsonFromSceSim;

var setSceSimFromJson = function setSceSimFromJson(json) {
  var marshalled = sceSimMarshaller.marshalString(json); // console.log(marshalled);

  return marshalled;
};
/**
 * 
 * @param dmn Convert dmn XML string into JSON
 */


exports.setSceSimFromJson = setSceSimFromJson;

var getJsonFromDmn = function getJsonFromDmn(dmn) {
  var unmarshalled = dmnUnmarshaller.unmarshalString(dmn); // console.log(unmarshalled);

  return unmarshalled;
};
/**
 * Convert JSON to dmn XML string
 */


exports.getJsonFromDmn = getJsonFromDmn;

var setDmnFromJson = function setDmnFromJson(json) {
  var marshalled = dmnMarshaller.marshalString(json); // console.log(marshalled);

  return marshalled;
};

exports.setDmnFromJson = setDmnFromJson;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3V0aWxzL2pzb25peFV0aWxzLnRzIl0sIm5hbWVzIjpbIkpzb25peCIsInJlcXVpcmUiLCJTY2VTaW1SdWxlcyIsInNjZXNpbSIsIkRtblJ1bGVzIiwiZG1uIiwic2NlU2ltQ29udGV4dCIsIkNvbnRleHQiLCJkbW5Db250ZXh0Iiwic2NlU2ltVW5tYXJzaGFsbGVyIiwiY3JlYXRlVW5tYXJzaGFsbGVyIiwiZG1uVW5tYXJzaGFsbGVyIiwic2NlU2ltTWFyc2hhbGxlciIsImNyZWF0ZU1hcnNoYWxsZXIiLCJkbW5NYXJzaGFsbGVyIiwiZ2V0SnNvbkZyb21TY2VTaW0iLCJ1bm1hcnNoYWxsZWQiLCJ1bm1hcnNoYWxTdHJpbmciLCJzZXRTY2VTaW1Gcm9tSnNvbiIsImpzb24iLCJtYXJzaGFsbGVkIiwibWFyc2hhbFN0cmluZyIsImdldEpzb25Gcm9tRG1uIiwic2V0RG1uRnJvbUpzb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQSxJQUFNQSxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQVAsQ0FBb0JELE1BQW5DLEMsQ0FFQTs7O0FBQ0EsSUFBTUUsV0FBVyxHQUFHRCxPQUFPLENBQUMsb0JBQUQsQ0FBUCxDQUE4QkUsTUFBbEQ7O0FBQ0EsSUFBTUMsUUFBUSxHQUFHSCxPQUFPLENBQUMsaUJBQUQsQ0FBUCxDQUEyQkksR0FBNUMsQyxDQUVBOzs7QUFDQSxJQUFNQyxhQUFhLEdBQUcsSUFBSU4sTUFBTSxDQUFDTyxPQUFYLENBQW1CLENBQUNMLFdBQUQsQ0FBbkIsQ0FBdEI7QUFDQSxJQUFNTSxVQUFVLEdBQUcsSUFBSVIsTUFBTSxDQUFDTyxPQUFYLENBQW1CLENBQUNILFFBQUQsQ0FBbkIsQ0FBbkIsQyxDQUVBOztBQUNBLElBQU1LLGtCQUFrQixHQUFHSCxhQUFhLENBQUNJLGtCQUFkLEVBQTNCO0FBQ0EsSUFBTUMsZUFBZSxHQUFHSCxVQUFVLENBQUNFLGtCQUFYLEVBQXhCLEMsQ0FFQTs7QUFDQSxJQUFNRSxnQkFBZ0IsR0FBR04sYUFBYSxDQUFDTyxnQkFBZCxFQUF6QjtBQUNBLElBQU1DLGFBQWEsR0FBR04sVUFBVSxDQUFDSyxnQkFBWCxFQUF0QjtBQUVBOzs7O0FBR08sSUFBTUUsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFvQixDQUFDWixNQUFELEVBQW9CO0FBQ25ELE1BQU1hLFlBQVksR0FBR1Asa0JBQWtCLENBQUNRLGVBQW5CLENBQW1DZCxNQUFuQyxDQUFyQixDQURtRCxDQUVuRDs7QUFDQSxTQUFPYSxZQUFQO0FBQ0QsQ0FKTTtBQU1QOzs7Ozs7O0FBR08sSUFBTUUsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFvQixDQUFDQyxJQUFELEVBQWtCO0FBQ2pELE1BQU1DLFVBQVUsR0FBR1IsZ0JBQWdCLENBQUNTLGFBQWpCLENBQStCRixJQUEvQixDQUFuQixDQURpRCxDQUVqRDs7QUFDQSxTQUFPQyxVQUFQO0FBQ0QsQ0FKTTtBQU1QOzs7Ozs7OztBQUlPLElBQU1FLGNBQWMsR0FBRyxTQUFqQkEsY0FBaUIsQ0FBQ2pCLEdBQUQsRUFBaUI7QUFDN0MsTUFBTVcsWUFBWSxHQUFHTCxlQUFlLENBQUNNLGVBQWhCLENBQWdDWixHQUFoQyxDQUFyQixDQUQ2QyxDQUU3Qzs7QUFDQSxTQUFPVyxZQUFQO0FBQ0QsQ0FKTTtBQU1QOzs7Ozs7O0FBR08sSUFBTU8sY0FBYyxHQUFHLFNBQWpCQSxjQUFpQixDQUFDSixJQUFELEVBQWU7QUFDM0MsTUFBTUMsVUFBVSxHQUFHTixhQUFhLENBQUNPLGFBQWQsQ0FBNEJGLElBQTVCLENBQW5CLENBRDJDLENBRTNDOztBQUNBLFNBQU9DLFVBQVA7QUFDRCxDQUpNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2Nlc2ltIH0gZnJvbSAnLi4vLi4vdHlwZXMvU2NlU2ltJztcblxuY29uc3QgSnNvbml4ID0gcmVxdWlyZSgnLi9qc29uaXgnKS5Kc29uaXg7XG5cbi8vIExvYWQgdGhlIHNjaGVtYSBydWxlc1xuY29uc3QgU2NlU2ltUnVsZXMgPSByZXF1aXJlKCcuLi8uLi9ydWxlcy9zY2VzaW0nKS5zY2VzaW07XG5jb25zdCBEbW5SdWxlcyA9IHJlcXVpcmUoJy4uLy4uL3J1bGVzL2RtbicpLmRtbjtcblxuLy8gQ29uc3RydWN0IGEgSnNvbml4IGNvbnRleHQgLSBhIGZhY3RvcnkgZm9yIHVubWFyc2hhbGxlciAocGFyc2VyKSBhbmQgbWFyc2hhbGxlciAoc2VyaWFsaXplcilcbmNvbnN0IHNjZVNpbUNvbnRleHQgPSBuZXcgSnNvbml4LkNvbnRleHQoW1NjZVNpbVJ1bGVzXSk7XG5jb25zdCBkbW5Db250ZXh0ID0gbmV3IEpzb25peC5Db250ZXh0KFtEbW5SdWxlc10pO1xuXG4vLyBDcmVhdGUgYW4gdW5tYXJzaGFsbGVyIChzY2VzaW0gPT4ganNvbilcbmNvbnN0IHNjZVNpbVVubWFyc2hhbGxlciA9IHNjZVNpbUNvbnRleHQuY3JlYXRlVW5tYXJzaGFsbGVyKCk7XG5jb25zdCBkbW5Vbm1hcnNoYWxsZXIgPSBkbW5Db250ZXh0LmNyZWF0ZVVubWFyc2hhbGxlcigpO1xuXG4vLyBDcmVhdGUgYSBtYXJzaGFsbGVyIChqc29uID0+IHNjZXNpbSlcbmNvbnN0IHNjZVNpbU1hcnNoYWxsZXIgPSBzY2VTaW1Db250ZXh0LmNyZWF0ZU1hcnNoYWxsZXIoKTtcbmNvbnN0IGRtbk1hcnNoYWxsZXIgPSBkbW5Db250ZXh0LmNyZWF0ZU1hcnNoYWxsZXIoKTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgc2Nlc2ltIFhNTCBzdHJpbmcgaW50byBKU09OXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRKc29uRnJvbVNjZVNpbSA9IChzY2VzaW06IHN0cmluZykgPT4ge1xuICBjb25zdCB1bm1hcnNoYWxsZWQgPSBzY2VTaW1Vbm1hcnNoYWxsZXIudW5tYXJzaGFsU3RyaW5nKHNjZXNpbSk7XG4gIC8vIGNvbnNvbGUubG9nKHVubWFyc2hhbGxlZCk7XG4gIHJldHVybiB1bm1hcnNoYWxsZWQ7XG59XG5cbi8qKlxuICogQ29udmVydCBKU09OIHRvIHNjZXNpbSBYTUwgc3RyaW5nXG4gKi9cbmV4cG9ydCBjb25zdCBzZXRTY2VTaW1Gcm9tSnNvbiA9IChqc29uOiBTY2VzaW0pID0+IHtcbiAgY29uc3QgbWFyc2hhbGxlZCA9IHNjZVNpbU1hcnNoYWxsZXIubWFyc2hhbFN0cmluZyhqc29uKTtcbiAgLy8gY29uc29sZS5sb2cobWFyc2hhbGxlZCk7XG4gIHJldHVybiBtYXJzaGFsbGVkO1xufVxuXG4vKipcbiAqIFxuICogQHBhcmFtIGRtbiBDb252ZXJ0IGRtbiBYTUwgc3RyaW5nIGludG8gSlNPTlxuICovXG5leHBvcnQgY29uc3QgZ2V0SnNvbkZyb21EbW4gPSAoZG1uOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgdW5tYXJzaGFsbGVkID0gZG1uVW5tYXJzaGFsbGVyLnVubWFyc2hhbFN0cmluZyhkbW4pO1xuICAvLyBjb25zb2xlLmxvZyh1bm1hcnNoYWxsZWQpO1xuICByZXR1cm4gdW5tYXJzaGFsbGVkO1xufVxuXG4vKipcbiAqIENvbnZlcnQgSlNPTiB0byBkbW4gWE1MIHN0cmluZ1xuICovXG5leHBvcnQgY29uc3Qgc2V0RG1uRnJvbUpzb24gPSAoanNvbjogYW55KSA9PiB7XG4gIGNvbnN0IG1hcnNoYWxsZWQgPSBkbW5NYXJzaGFsbGVyLm1hcnNoYWxTdHJpbmcoanNvbik7XG4gIC8vIGNvbnNvbGUubG9nKG1hcnNoYWxsZWQpO1xuICByZXR1cm4gbWFyc2hhbGxlZDtcbn0iXX0=