"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExpressionElementTYPENAME = exports.Clazz = exports.RawValueTYPENAME = exports.FactMappingValueTYPENAME = exports.ImportsTYPENAME = void 0;

/**
 * Types generated from .scesim JSON file using https://quicktype.io/typescript/
 */
var ImportsTYPENAME;
exports.ImportsTYPENAME = ImportsTYPENAME;

(function (ImportsTYPENAME) {
  ImportsTYPENAME["ScesimExpressionIdentifierType"] = "scesim.ExpressionIdentifierType";
  ImportsTYPENAME["ScesimFactIdentifierType"] = "scesim.FactIdentifierType";
  ImportsTYPENAME["ScesimWrappedImportsType"] = "scesim.WrappedImportsType";
})(ImportsTYPENAME || (exports.ImportsTYPENAME = ImportsTYPENAME = {}));

var FactMappingValueTYPENAME;
exports.FactMappingValueTYPENAME = FactMappingValueTYPENAME;

(function (FactMappingValueTYPENAME) {
  FactMappingValueTYPENAME["ScesimFactMappingValueType"] = "scesim.FactMappingValueType";
})(FactMappingValueTYPENAME || (exports.FactMappingValueTYPENAME = FactMappingValueTYPENAME = {}));

var RawValueTYPENAME;
exports.RawValueTYPENAME = RawValueTYPENAME;

(function (RawValueTYPENAME) {
  RawValueTYPENAME["ScesimRawValueType"] = "scesim.RawValueType";
})(RawValueTYPENAME || (exports.RawValueTYPENAME = RawValueTYPENAME = {}));

var Clazz;
exports.Clazz = Clazz;

(function (Clazz) {
  Clazz["String"] = "string";
})(Clazz || (exports.Clazz = Clazz = {}));

var ExpressionElementTYPENAME;
exports.ExpressionElementTYPENAME = ExpressionElementTYPENAME;

(function (ExpressionElementTYPENAME) {
  ExpressionElementTYPENAME["ScesimExpressionElementType"] = "scesim.ExpressionElementType";
})(ExpressionElementTYPENAME || (exports.ExpressionElementTYPENAME = ExpressionElementTYPENAME = {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9TY2VTaW0uZC50cyJdLCJuYW1lcyI6WyJJbXBvcnRzVFlQRU5BTUUiLCJGYWN0TWFwcGluZ1ZhbHVlVFlQRU5BTUUiLCJSYXdWYWx1ZVRZUEVOQU1FIiwiQ2xhenoiLCJFeHByZXNzaW9uRWxlbWVudFRZUEVOQU1FIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7OztJQWlDWUEsZTs7O1dBQUFBLGU7QUFBQUEsRUFBQUEsZTtBQUFBQSxFQUFBQSxlO0FBQUFBLEVBQUFBLGU7R0FBQUEsZSwrQkFBQUEsZTs7SUFrQ0FDLHdCOzs7V0FBQUEsd0I7QUFBQUEsRUFBQUEsd0I7R0FBQUEsd0Isd0NBQUFBLHdCOztJQVVBQyxnQjs7O1dBQUFBLGdCO0FBQUFBLEVBQUFBLGdCO0dBQUFBLGdCLGdDQUFBQSxnQjs7SUFJQUMsSzs7O1dBQUFBLEs7QUFBQUEsRUFBQUEsSztHQUFBQSxLLHFCQUFBQSxLOztJQXdDQUMseUI7OztXQUFBQSx5QjtBQUFBQSxFQUFBQSx5QjtHQUFBQSx5Qix5Q0FBQUEseUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFR5cGVzIGdlbmVyYXRlZCBmcm9tIC5zY2VzaW0gSlNPTiBmaWxlIHVzaW5nIGh0dHBzOi8vcXVpY2t0eXBlLmlvL3R5cGVzY3JpcHQvXG4gKi9cblxuZXhwb3J0IGludGVyZmFjZSBTY2VzaW0ge1xuICBuYW1lOiAgTmFtZTtcbiAgdmFsdWU6IFZhbHVlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5hbWUge1xuICBuYW1lc3BhY2VVUkk6IHN0cmluZztcbiAgbG9jYWxQYXJ0OiAgICBzdHJpbmc7XG4gIHByZWZpeDogICAgICAgc3RyaW5nO1xuICBrZXk6ICAgICAgICAgIHN0cmluZztcbiAgc3RyaW5nOiAgICAgICBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmFsdWUge1xuICBUWVBFX05BTUU6ICBzdHJpbmc7XG4gIHZlcnNpb246ICAgIHN0cmluZztcbiAgc2ltdWxhdGlvbjogU2ltdWxhdGlvbjtcbiAgaW1wb3J0czogICAgVmFsdWVJbXBvcnRzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZhbHVlSW1wb3J0cyB7XG4gIFRZUEVfTkFNRTogc3RyaW5nO1xuICBpbXBvcnRzOiAgIEV4cHJlc3Npb25JZGVudGlmaWVyQ2xhc3M7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXhwcmVzc2lvbklkZW50aWZpZXJDbGFzcyB7XG4gIFRZUEVfTkFNRTogSW1wb3J0c1RZUEVOQU1FO1xufVxuXG5leHBvcnQgZW51bSBJbXBvcnRzVFlQRU5BTUUge1xuICBTY2VzaW1FeHByZXNzaW9uSWRlbnRpZmllclR5cGUgPSBcInNjZXNpbS5FeHByZXNzaW9uSWRlbnRpZmllclR5cGVcIixcbiAgU2Nlc2ltRmFjdElkZW50aWZpZXJUeXBlID0gXCJzY2VzaW0uRmFjdElkZW50aWZpZXJUeXBlXCIsXG4gIFNjZXNpbVdyYXBwZWRJbXBvcnRzVHlwZSA9IFwic2Nlc2ltLldyYXBwZWRJbXBvcnRzVHlwZVwiLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNpbXVsYXRpb24ge1xuICBUWVBFX05BTUU6ICAgICAgICAgICAgc3RyaW5nO1xuICBzaW11bGF0aW9uRGVzY3JpcHRvcjogU2ltdWxhdGlvbkRlc2NyaXB0b3I7XG4gIHNjZW5hcmlvczogICAgICAgICAgICBTY2VuYXJpb3M7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NlbmFyaW9zIHtcbiAgVFlQRV9OQU1FOiBzdHJpbmc7XG4gIHNjZW5hcmlvOiAgU2NlbmFyaW9bXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTY2VuYXJpbyB7XG4gIFRZUEVfTkFNRTogICAgICAgICBzdHJpbmc7XG4gIGZhY3RNYXBwaW5nVmFsdWVzOiBGYWN0TWFwcGluZ1ZhbHVlcztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGYWN0TWFwcGluZ1ZhbHVlcyB7XG4gIFRZUEVfTkFNRTogICAgICAgIHN0cmluZztcbiAgZmFjdE1hcHBpbmdWYWx1ZTogRmFjdE1hcHBpbmdWYWx1ZVtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZhY3RNYXBwaW5nVmFsdWUge1xuICBUWVBFX05BTUU6ICAgICAgICAgICAgRmFjdE1hcHBpbmdWYWx1ZVRZUEVOQU1FO1xuICBmYWN0SWRlbnRpZmllcjogICAgICAgRXhwcmVzc2lvbklkZW50aWZpZXJDbGFzcztcbiAgZXhwcmVzc2lvbklkZW50aWZpZXI6IEV4cHJlc3Npb25JZGVudGlmaWVyQ2xhc3M7XG4gIHJhd1ZhbHVlPzogICAgICAgICAgICBSYXdWYWx1ZTtcbn1cblxuZXhwb3J0IGVudW0gRmFjdE1hcHBpbmdWYWx1ZVRZUEVOQU1FIHtcbiAgU2Nlc2ltRmFjdE1hcHBpbmdWYWx1ZVR5cGUgPSBcInNjZXNpbS5GYWN0TWFwcGluZ1ZhbHVlVHlwZVwiLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJhd1ZhbHVlIHtcbiAgVFlQRV9OQU1FOiBSYXdWYWx1ZVRZUEVOQU1FO1xuICBjbGF6ejogICAgIENsYXp6O1xuICB2YWx1ZTogICAgIHN0cmluZztcbn1cblxuZXhwb3J0IGVudW0gUmF3VmFsdWVUWVBFTkFNRSB7XG4gIFNjZXNpbVJhd1ZhbHVlVHlwZSA9IFwic2Nlc2ltLlJhd1ZhbHVlVHlwZVwiLFxufVxuXG5leHBvcnQgZW51bSBDbGF6eiB7XG4gIFN0cmluZyA9IFwic3RyaW5nXCIsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2ltdWxhdGlvbkRlc2NyaXB0b3Ige1xuICBUWVBFX05BTUU6ICAgICBzdHJpbmc7XG4gIGZhY3RNYXBwaW5nczogIEZhY3RNYXBwaW5ncztcbiAgZG1uRmlsZVBhdGg6ICAgc3RyaW5nO1xuICB0eXBlOiAgICAgICAgICBzdHJpbmc7XG4gIGZpbGVOYW1lOiAgICAgIHN0cmluZztcbiAgZG1uTmFtZXNwYWNlOiAgc3RyaW5nO1xuICBkbW5OYW1lOiAgICAgICBzdHJpbmc7XG4gIHNraXBGcm9tQnVpbGQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmFjdE1hcHBpbmdzIHtcbiAgVFlQRV9OQU1FOiAgIHN0cmluZztcbiAgZmFjdE1hcHBpbmc6IEZhY3RNYXBwaW5nW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmFjdE1hcHBpbmcge1xuICBUWVBFX05BTUU6ICAgICAgICAgICAgc3RyaW5nO1xuICBleHByZXNzaW9uRWxlbWVudHM6ICAgRXhwcmVzc2lvbkVsZW1lbnRzO1xuICBleHByZXNzaW9uSWRlbnRpZmllcjogRXhwcmVzc2lvbklkZW50aWZpZXI7XG4gIGZhY3RJZGVudGlmaWVyOiAgICAgICBGYWN0SWRlbnRpZmllcjtcbiAgY2xhc3NOYW1lOiAgICAgICAgICAgIHN0cmluZztcbiAgZmFjdEFsaWFzOiAgICAgICAgICAgIHN0cmluZztcbiAgZXhwcmVzc2lvbkFsaWFzPzogICAgIHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFeHByZXNzaW9uRWxlbWVudHMge1xuICBUWVBFX05BTUU6ICAgICAgICAgIHN0cmluZztcbiAgZXhwcmVzc2lvbkVsZW1lbnQ/OiBFeHByZXNzaW9uRWxlbWVudFtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEV4cHJlc3Npb25FbGVtZW50IHtcbiAgVFlQRV9OQU1FOiBFeHByZXNzaW9uRWxlbWVudFRZUEVOQU1FO1xuICBzdGVwOiAgICAgIHN0cmluZztcbn1cblxuZXhwb3J0IGVudW0gRXhwcmVzc2lvbkVsZW1lbnRUWVBFTkFNRSB7XG4gIFNjZXNpbUV4cHJlc3Npb25FbGVtZW50VHlwZSA9IFwic2Nlc2ltLkV4cHJlc3Npb25FbGVtZW50VHlwZVwiLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEV4cHJlc3Npb25JZGVudGlmaWVyIHtcbiAgVFlQRV9OQU1FOiBJbXBvcnRzVFlQRU5BTUU7XG4gIG5hbWU6ICAgICAgc3RyaW5nO1xuICB0eXBlOiAgICAgIHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGYWN0SWRlbnRpZmllciB7XG4gIFRZUEVfTkFNRTogIEltcG9ydHNUWVBFTkFNRTtcbiAgbmFtZT86ICAgICAgc3RyaW5nO1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG59XG4iXX0=