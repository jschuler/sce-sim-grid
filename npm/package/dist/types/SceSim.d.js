"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExpressionElementTYPENAME = exports.Clazz = exports.RawValueTYPENAME = exports.FactMappingValueTYPENAME = exports.ImportsTYPENAME = void 0;

/**
 * Types generated from .scesim JSON file using https://quicktype.io/typescript/
 */
var ImportsTYPENAME;
exports.ImportsTYPENAME = ImportsTYPENAME;

(function (ImportsTYPENAME) {
  ImportsTYPENAME["ScesimExpressionIdentifierType"] = "scesim.ExpressionIdentifierType";
  ImportsTYPENAME["ScesimFactIdentifierType"] = "scesim.FactIdentifierType";
  ImportsTYPENAME["ScesimWrappedImportsType"] = "scesim.WrappedImportsType";
})(ImportsTYPENAME || (exports.ImportsTYPENAME = ImportsTYPENAME = {}));

var FactMappingValueTYPENAME;
exports.FactMappingValueTYPENAME = FactMappingValueTYPENAME;

(function (FactMappingValueTYPENAME) {
  FactMappingValueTYPENAME["ScesimFactMappingValueType"] = "scesim.FactMappingValueType";
})(FactMappingValueTYPENAME || (exports.FactMappingValueTYPENAME = FactMappingValueTYPENAME = {}));

var RawValueTYPENAME;
exports.RawValueTYPENAME = RawValueTYPENAME;

(function (RawValueTYPENAME) {
  RawValueTYPENAME["ScesimRawValueType"] = "scesim.RawValueType";
})(RawValueTYPENAME || (exports.RawValueTYPENAME = RawValueTYPENAME = {}));

var Clazz;
exports.Clazz = Clazz;

(function (Clazz) {
  Clazz["String"] = "string";
})(Clazz || (exports.Clazz = Clazz = {}));

var ExpressionElementTYPENAME;
exports.ExpressionElementTYPENAME = ExpressionElementTYPENAME;

(function (ExpressionElementTYPENAME) {
  ExpressionElementTYPENAME["ScesimExpressionElementType"] = "scesim.ExpressionElementType";
})(ExpressionElementTYPENAME || (exports.ExpressionElementTYPENAME = ExpressionElementTYPENAME = {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvdHlwZXMvU2NlU2ltLmQudHMiXSwibmFtZXMiOlsiSW1wb3J0c1RZUEVOQU1FIiwiRmFjdE1hcHBpbmdWYWx1ZVRZUEVOQU1FIiwiUmF3VmFsdWVUWVBFTkFNRSIsIkNsYXp6IiwiRXhwcmVzc2lvbkVsZW1lbnRUWVBFTkFNRSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7SUFpQ1lBLGU7OztXQUFBQSxlO0FBQUFBLEVBQUFBLGU7QUFBQUEsRUFBQUEsZTtBQUFBQSxFQUFBQSxlO0dBQUFBLGUsK0JBQUFBLGU7O0lBa0NBQyx3Qjs7O1dBQUFBLHdCO0FBQUFBLEVBQUFBLHdCO0dBQUFBLHdCLHdDQUFBQSx3Qjs7SUFVQUMsZ0I7OztXQUFBQSxnQjtBQUFBQSxFQUFBQSxnQjtHQUFBQSxnQixnQ0FBQUEsZ0I7O0lBSUFDLEs7OztXQUFBQSxLO0FBQUFBLEVBQUFBLEs7R0FBQUEsSyxxQkFBQUEsSzs7SUF3Q0FDLHlCOzs7V0FBQUEseUI7QUFBQUEsRUFBQUEseUI7R0FBQUEseUIseUNBQUFBLHlCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUeXBlcyBnZW5lcmF0ZWQgZnJvbSAuc2Nlc2ltIEpTT04gZmlsZSB1c2luZyBodHRwczovL3F1aWNrdHlwZS5pby90eXBlc2NyaXB0L1xuICovXG5cbmV4cG9ydCBpbnRlcmZhY2UgU2Nlc2ltIHtcbiAgbmFtZTogIE5hbWU7XG4gIHZhbHVlOiBWYWx1ZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBOYW1lIHtcbiAgbmFtZXNwYWNlVVJJOiBzdHJpbmc7XG4gIGxvY2FsUGFydDogICAgc3RyaW5nO1xuICBwcmVmaXg6ICAgICAgIHN0cmluZztcbiAga2V5OiAgICAgICAgICBzdHJpbmc7XG4gIHN0cmluZzogICAgICAgc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZhbHVlIHtcbiAgVFlQRV9OQU1FOiAgc3RyaW5nO1xuICB2ZXJzaW9uOiAgICBzdHJpbmc7XG4gIHNpbXVsYXRpb246IFNpbXVsYXRpb247XG4gIGltcG9ydHM6ICAgIFZhbHVlSW1wb3J0cztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWYWx1ZUltcG9ydHMge1xuICBUWVBFX05BTUU6IHN0cmluZztcbiAgaW1wb3J0czogICBFeHByZXNzaW9uSWRlbnRpZmllckNsYXNzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEV4cHJlc3Npb25JZGVudGlmaWVyQ2xhc3Mge1xuICBUWVBFX05BTUU6IEltcG9ydHNUWVBFTkFNRTtcbn1cblxuZXhwb3J0IGVudW0gSW1wb3J0c1RZUEVOQU1FIHtcbiAgU2Nlc2ltRXhwcmVzc2lvbklkZW50aWZpZXJUeXBlID0gXCJzY2VzaW0uRXhwcmVzc2lvbklkZW50aWZpZXJUeXBlXCIsXG4gIFNjZXNpbUZhY3RJZGVudGlmaWVyVHlwZSA9IFwic2Nlc2ltLkZhY3RJZGVudGlmaWVyVHlwZVwiLFxuICBTY2VzaW1XcmFwcGVkSW1wb3J0c1R5cGUgPSBcInNjZXNpbS5XcmFwcGVkSW1wb3J0c1R5cGVcIixcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTaW11bGF0aW9uIHtcbiAgVFlQRV9OQU1FOiAgICAgICAgICAgIHN0cmluZztcbiAgc2ltdWxhdGlvbkRlc2NyaXB0b3I6IFNpbXVsYXRpb25EZXNjcmlwdG9yO1xuICBzY2VuYXJpb3M6ICAgICAgICAgICAgU2NlbmFyaW9zO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNjZW5hcmlvcyB7XG4gIFRZUEVfTkFNRTogc3RyaW5nO1xuICBzY2VuYXJpbzogIFNjZW5hcmlvW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NlbmFyaW8ge1xuICBUWVBFX05BTUU6ICAgICAgICAgc3RyaW5nO1xuICBmYWN0TWFwcGluZ1ZhbHVlczogRmFjdE1hcHBpbmdWYWx1ZXM7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmFjdE1hcHBpbmdWYWx1ZXMge1xuICBUWVBFX05BTUU6ICAgICAgICBzdHJpbmc7XG4gIGZhY3RNYXBwaW5nVmFsdWU6IEZhY3RNYXBwaW5nVmFsdWVbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGYWN0TWFwcGluZ1ZhbHVlIHtcbiAgVFlQRV9OQU1FOiAgICAgICAgICAgIEZhY3RNYXBwaW5nVmFsdWVUWVBFTkFNRTtcbiAgZmFjdElkZW50aWZpZXI6ICAgICAgIEV4cHJlc3Npb25JZGVudGlmaWVyQ2xhc3M7XG4gIGV4cHJlc3Npb25JZGVudGlmaWVyOiBFeHByZXNzaW9uSWRlbnRpZmllckNsYXNzO1xuICByYXdWYWx1ZT86ICAgICAgICAgICAgUmF3VmFsdWU7XG59XG5cbmV4cG9ydCBlbnVtIEZhY3RNYXBwaW5nVmFsdWVUWVBFTkFNRSB7XG4gIFNjZXNpbUZhY3RNYXBwaW5nVmFsdWVUeXBlID0gXCJzY2VzaW0uRmFjdE1hcHBpbmdWYWx1ZVR5cGVcIixcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSYXdWYWx1ZSB7XG4gIFRZUEVfTkFNRTogUmF3VmFsdWVUWVBFTkFNRTtcbiAgY2xheno6ICAgICBDbGF6ejtcbiAgdmFsdWU6ICAgICBzdHJpbmc7XG59XG5cbmV4cG9ydCBlbnVtIFJhd1ZhbHVlVFlQRU5BTUUge1xuICBTY2VzaW1SYXdWYWx1ZVR5cGUgPSBcInNjZXNpbS5SYXdWYWx1ZVR5cGVcIixcbn1cblxuZXhwb3J0IGVudW0gQ2xhenoge1xuICBTdHJpbmcgPSBcInN0cmluZ1wiLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNpbXVsYXRpb25EZXNjcmlwdG9yIHtcbiAgVFlQRV9OQU1FOiAgICAgc3RyaW5nO1xuICBmYWN0TWFwcGluZ3M6ICBGYWN0TWFwcGluZ3M7XG4gIGRtbkZpbGVQYXRoOiAgIHN0cmluZztcbiAgdHlwZTogICAgICAgICAgc3RyaW5nO1xuICBmaWxlTmFtZTogICAgICBzdHJpbmc7XG4gIGRtbk5hbWVzcGFjZTogIHN0cmluZztcbiAgZG1uTmFtZTogICAgICAgc3RyaW5nO1xuICBza2lwRnJvbUJ1aWxkOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZhY3RNYXBwaW5ncyB7XG4gIFRZUEVfTkFNRTogICBzdHJpbmc7XG4gIGZhY3RNYXBwaW5nOiBGYWN0TWFwcGluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZhY3RNYXBwaW5nIHtcbiAgVFlQRV9OQU1FOiAgICAgICAgICAgIHN0cmluZztcbiAgZXhwcmVzc2lvbkVsZW1lbnRzOiAgIEV4cHJlc3Npb25FbGVtZW50cztcbiAgZXhwcmVzc2lvbklkZW50aWZpZXI6IEV4cHJlc3Npb25JZGVudGlmaWVyO1xuICBmYWN0SWRlbnRpZmllcjogICAgICAgRmFjdElkZW50aWZpZXI7XG4gIGNsYXNzTmFtZTogICAgICAgICAgICBzdHJpbmc7XG4gIGZhY3RBbGlhczogICAgICAgICAgICBzdHJpbmc7XG4gIGV4cHJlc3Npb25BbGlhcz86ICAgICBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXhwcmVzc2lvbkVsZW1lbnRzIHtcbiAgVFlQRV9OQU1FOiAgICAgICAgICBzdHJpbmc7XG4gIGV4cHJlc3Npb25FbGVtZW50PzogRXhwcmVzc2lvbkVsZW1lbnRbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFeHByZXNzaW9uRWxlbWVudCB7XG4gIFRZUEVfTkFNRTogRXhwcmVzc2lvbkVsZW1lbnRUWVBFTkFNRTtcbiAgc3RlcDogICAgICBzdHJpbmc7XG59XG5cbmV4cG9ydCBlbnVtIEV4cHJlc3Npb25FbGVtZW50VFlQRU5BTUUge1xuICBTY2VzaW1FeHByZXNzaW9uRWxlbWVudFR5cGUgPSBcInNjZXNpbS5FeHByZXNzaW9uRWxlbWVudFR5cGVcIixcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFeHByZXNzaW9uSWRlbnRpZmllciB7XG4gIFRZUEVfTkFNRTogSW1wb3J0c1RZUEVOQU1FO1xuICBuYW1lOiAgICAgIHN0cmluZztcbiAgdHlwZTogICAgICBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmFjdElkZW50aWZpZXIge1xuICBUWVBFX05BTUU6ICBJbXBvcnRzVFlQRU5BTUU7XG4gIG5hbWU/OiAgICAgIHN0cmluZztcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xufVxuIl19