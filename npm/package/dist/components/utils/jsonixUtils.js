"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setDmnFromJson = exports.getJsonFromDmn = exports.setSceSimFromJson = exports.getJsonFromSceSim = void 0;

var Jsonix = require('./jsonix').Jsonix; // Load the schema rules


var SceSimRules = require('../../rules/scesim').scesim;

var DmnRules = require('../../rules/dmn').dmn; // Construct a Jsonix context - a factory for unmarshaller (parser) and marshaller (serializer)


var sceSimContext = new Jsonix.Context([SceSimRules]);
var dmnContext = new Jsonix.Context([DmnRules]); // Create an unmarshaller (scesim => json)

var sceSimUnmarshaller = sceSimContext.createUnmarshaller();
var dmnUnmarshaller = dmnContext.createUnmarshaller(); // Create a marshaller (json => scesim)

var sceSimMarshaller = sceSimContext.createMarshaller();
var dmnMarshaller = dmnContext.createMarshaller();
/**
 * Convert a scesim XML string into JSON
 */

var getJsonFromSceSim = function getJsonFromSceSim(scesim) {
  var unmarshalled = sceSimUnmarshaller.unmarshalString(scesim); // console.log(unmarshalled);

  return unmarshalled;
};
/**
 * Convert JSON to scesim XML string
 */


exports.getJsonFromSceSim = getJsonFromSceSim;

var setSceSimFromJson = function setSceSimFromJson(json) {
  var marshalled = sceSimMarshaller.marshalString(json); // console.log(marshalled);

  return marshalled;
};
/**
 * 
 * @param dmn Convert dmn XML string into JSON
 */


exports.setSceSimFromJson = setSceSimFromJson;

var getJsonFromDmn = function getJsonFromDmn(dmn) {
  var unmarshalled = dmnUnmarshaller.unmarshalString(dmn); // console.log(unmarshalled);

  return unmarshalled;
};
/**
 * Convert JSON to dmn XML string
 */


exports.getJsonFromDmn = getJsonFromDmn;

var setDmnFromJson = function setDmnFromJson(json) {
  var marshalled = dmnMarshaller.marshalString(json); // console.log(marshalled);

  return marshalled;
};

exports.setDmnFromJson = setDmnFromJson;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvY29tcG9uZW50cy91dGlscy9qc29uaXhVdGlscy50cyJdLCJuYW1lcyI6WyJKc29uaXgiLCJyZXF1aXJlIiwiU2NlU2ltUnVsZXMiLCJzY2VzaW0iLCJEbW5SdWxlcyIsImRtbiIsInNjZVNpbUNvbnRleHQiLCJDb250ZXh0IiwiZG1uQ29udGV4dCIsInNjZVNpbVVubWFyc2hhbGxlciIsImNyZWF0ZVVubWFyc2hhbGxlciIsImRtblVubWFyc2hhbGxlciIsInNjZVNpbU1hcnNoYWxsZXIiLCJjcmVhdGVNYXJzaGFsbGVyIiwiZG1uTWFyc2hhbGxlciIsImdldEpzb25Gcm9tU2NlU2ltIiwidW5tYXJzaGFsbGVkIiwidW5tYXJzaGFsU3RyaW5nIiwic2V0U2NlU2ltRnJvbUpzb24iLCJqc29uIiwibWFyc2hhbGxlZCIsIm1hcnNoYWxTdHJpbmciLCJnZXRKc29uRnJvbURtbiIsInNldERtbkZyb21Kc29uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUEsSUFBTUEsTUFBTSxHQUFHQyxPQUFPLENBQUMsVUFBRCxDQUFQLENBQW9CRCxNQUFuQyxDLENBRUE7OztBQUNBLElBQU1FLFdBQVcsR0FBR0QsT0FBTyxDQUFDLG9CQUFELENBQVAsQ0FBOEJFLE1BQWxEOztBQUNBLElBQU1DLFFBQVEsR0FBR0gsT0FBTyxDQUFDLGlCQUFELENBQVAsQ0FBMkJJLEdBQTVDLEMsQ0FFQTs7O0FBQ0EsSUFBTUMsYUFBYSxHQUFHLElBQUlOLE1BQU0sQ0FBQ08sT0FBWCxDQUFtQixDQUFDTCxXQUFELENBQW5CLENBQXRCO0FBQ0EsSUFBTU0sVUFBVSxHQUFHLElBQUlSLE1BQU0sQ0FBQ08sT0FBWCxDQUFtQixDQUFDSCxRQUFELENBQW5CLENBQW5CLEMsQ0FFQTs7QUFDQSxJQUFNSyxrQkFBa0IsR0FBR0gsYUFBYSxDQUFDSSxrQkFBZCxFQUEzQjtBQUNBLElBQU1DLGVBQWUsR0FBR0gsVUFBVSxDQUFDRSxrQkFBWCxFQUF4QixDLENBRUE7O0FBQ0EsSUFBTUUsZ0JBQWdCLEdBQUdOLGFBQWEsQ0FBQ08sZ0JBQWQsRUFBekI7QUFDQSxJQUFNQyxhQUFhLEdBQUdOLFVBQVUsQ0FBQ0ssZ0JBQVgsRUFBdEI7QUFFQTs7OztBQUdPLElBQU1FLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0IsQ0FBQ1osTUFBRCxFQUFvQjtBQUNuRCxNQUFNYSxZQUFZLEdBQUdQLGtCQUFrQixDQUFDUSxlQUFuQixDQUFtQ2QsTUFBbkMsQ0FBckIsQ0FEbUQsQ0FFbkQ7O0FBQ0EsU0FBT2EsWUFBUDtBQUNELENBSk07QUFNUDs7Ozs7OztBQUdPLElBQU1FLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0IsQ0FBQ0MsSUFBRCxFQUFrQjtBQUNqRCxNQUFNQyxVQUFVLEdBQUdSLGdCQUFnQixDQUFDUyxhQUFqQixDQUErQkYsSUFBL0IsQ0FBbkIsQ0FEaUQsQ0FFakQ7O0FBQ0EsU0FBT0MsVUFBUDtBQUNELENBSk07QUFNUDs7Ozs7Ozs7QUFJTyxJQUFNRSxjQUFjLEdBQUcsU0FBakJBLGNBQWlCLENBQUNqQixHQUFELEVBQWlCO0FBQzdDLE1BQU1XLFlBQVksR0FBR0wsZUFBZSxDQUFDTSxlQUFoQixDQUFnQ1osR0FBaEMsQ0FBckIsQ0FENkMsQ0FFN0M7O0FBQ0EsU0FBT1csWUFBUDtBQUNELENBSk07QUFNUDs7Ozs7OztBQUdPLElBQU1PLGNBQWMsR0FBRyxTQUFqQkEsY0FBaUIsQ0FBQ0osSUFBRCxFQUFlO0FBQzNDLE1BQU1DLFVBQVUsR0FBR04sYUFBYSxDQUFDTyxhQUFkLENBQTRCRixJQUE1QixDQUFuQixDQUQyQyxDQUUzQzs7QUFDQSxTQUFPQyxVQUFQO0FBQ0QsQ0FKTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNjZXNpbSB9IGZyb20gJy4uLy4uL3R5cGVzL1NjZVNpbSc7XG5cbmNvbnN0IEpzb25peCA9IHJlcXVpcmUoJy4vanNvbml4JykuSnNvbml4O1xuXG4vLyBMb2FkIHRoZSBzY2hlbWEgcnVsZXNcbmNvbnN0IFNjZVNpbVJ1bGVzID0gcmVxdWlyZSgnLi4vLi4vcnVsZXMvc2Nlc2ltJykuc2Nlc2ltO1xuY29uc3QgRG1uUnVsZXMgPSByZXF1aXJlKCcuLi8uLi9ydWxlcy9kbW4nKS5kbW47XG5cbi8vIENvbnN0cnVjdCBhIEpzb25peCBjb250ZXh0IC0gYSBmYWN0b3J5IGZvciB1bm1hcnNoYWxsZXIgKHBhcnNlcikgYW5kIG1hcnNoYWxsZXIgKHNlcmlhbGl6ZXIpXG5jb25zdCBzY2VTaW1Db250ZXh0ID0gbmV3IEpzb25peC5Db250ZXh0KFtTY2VTaW1SdWxlc10pO1xuY29uc3QgZG1uQ29udGV4dCA9IG5ldyBKc29uaXguQ29udGV4dChbRG1uUnVsZXNdKTtcblxuLy8gQ3JlYXRlIGFuIHVubWFyc2hhbGxlciAoc2Nlc2ltID0+IGpzb24pXG5jb25zdCBzY2VTaW1Vbm1hcnNoYWxsZXIgPSBzY2VTaW1Db250ZXh0LmNyZWF0ZVVubWFyc2hhbGxlcigpO1xuY29uc3QgZG1uVW5tYXJzaGFsbGVyID0gZG1uQ29udGV4dC5jcmVhdGVVbm1hcnNoYWxsZXIoKTtcblxuLy8gQ3JlYXRlIGEgbWFyc2hhbGxlciAoanNvbiA9PiBzY2VzaW0pXG5jb25zdCBzY2VTaW1NYXJzaGFsbGVyID0gc2NlU2ltQ29udGV4dC5jcmVhdGVNYXJzaGFsbGVyKCk7XG5jb25zdCBkbW5NYXJzaGFsbGVyID0gZG1uQ29udGV4dC5jcmVhdGVNYXJzaGFsbGVyKCk7XG5cbi8qKlxuICogQ29udmVydCBhIHNjZXNpbSBYTUwgc3RyaW5nIGludG8gSlNPTlxuICovXG5leHBvcnQgY29uc3QgZ2V0SnNvbkZyb21TY2VTaW0gPSAoc2Nlc2ltOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgdW5tYXJzaGFsbGVkID0gc2NlU2ltVW5tYXJzaGFsbGVyLnVubWFyc2hhbFN0cmluZyhzY2VzaW0pO1xuICAvLyBjb25zb2xlLmxvZyh1bm1hcnNoYWxsZWQpO1xuICByZXR1cm4gdW5tYXJzaGFsbGVkO1xufVxuXG4vKipcbiAqIENvbnZlcnQgSlNPTiB0byBzY2VzaW0gWE1MIHN0cmluZ1xuICovXG5leHBvcnQgY29uc3Qgc2V0U2NlU2ltRnJvbUpzb24gPSAoanNvbjogU2Nlc2ltKSA9PiB7XG4gIGNvbnN0IG1hcnNoYWxsZWQgPSBzY2VTaW1NYXJzaGFsbGVyLm1hcnNoYWxTdHJpbmcoanNvbik7XG4gIC8vIGNvbnNvbGUubG9nKG1hcnNoYWxsZWQpO1xuICByZXR1cm4gbWFyc2hhbGxlZDtcbn1cblxuLyoqXG4gKiBcbiAqIEBwYXJhbSBkbW4gQ29udmVydCBkbW4gWE1MIHN0cmluZyBpbnRvIEpTT05cbiAqL1xuZXhwb3J0IGNvbnN0IGdldEpzb25Gcm9tRG1uID0gKGRtbjogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IHVubWFyc2hhbGxlZCA9IGRtblVubWFyc2hhbGxlci51bm1hcnNoYWxTdHJpbmcoZG1uKTtcbiAgLy8gY29uc29sZS5sb2codW5tYXJzaGFsbGVkKTtcbiAgcmV0dXJuIHVubWFyc2hhbGxlZDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IEpTT04gdG8gZG1uIFhNTCBzdHJpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IHNldERtbkZyb21Kc29uID0gKGpzb246IGFueSkgPT4ge1xuICBjb25zdCBtYXJzaGFsbGVkID0gZG1uTWFyc2hhbGxlci5tYXJzaGFsU3RyaW5nKGpzb24pO1xuICAvLyBjb25zb2xlLmxvZyhtYXJzaGFsbGVkKTtcbiAgcmV0dXJuIG1hcnNoYWxsZWQ7XG59Il19