"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useKeyPress = void 0;

var _react = require("react");

var useKeyPress = function useKeyPress(targetKey, fn, options) {
  (0, _react.useEffect)(function () {
    var ref = options && options.hasOwnProperty('ref') ? options.ref : null;
    var id = options && options.hasOwnProperty('id') ? options.id : null;
    var withModifier = options && options.hasOwnProperty('withModifier') ? options.withModifier : false;
    var withShift = options && options.hasOwnProperty('withShift') ? options.withShift : false;
    var isActive = options && options.hasOwnProperty('isActive') ? options.isActive : true; // const log = (options && options.hasOwnProperty('log')) ? options.log : '';

    if (isActive === false) {
      return;
    }

    function downHandler(event) {
      var key = event.key,
          keyCode = event.keyCode;

      if (id && event.target.getAttribute('id') !== id) {
        return;
      }

      if (!withModifier && (event.ctrlKey || event.metaKey)) {
        // ignore key combination like ctrl+c/command+c unless we specifically asked to use with modifier
        return;
      }

      if (typeof targetKey === 'string' && key === targetKey || typeof targetKey === 'number' && keyCode === targetKey || targetKey.test && targetKey.test(key)) {
        if (withModifier && !withShift) {
          if ((event.ctrlKey || event.metaKey) && !event.shiftKey) {
            fn(event);
          }
        } else if (!withModifier && withShift) {
          if (!event.ctrlKey && !event.metaKey && event.shiftKey) {
            fn(event);
          }
        } else if (withModifier && withShift) {
          if ((event.ctrlKey || event.metaKey) && event.shiftKey) {
            fn(event);
          }
        } else {
          fn(event);
        }
      }
    }

    if (ref && ref.current) {
      // console.log(`add event listener ${log} - ref`);
      ref.current.addEventListener('keydown', downHandler);
    } else {
      // console.log(`add event listener ${log} - window`);
      window.addEventListener('keydown', downHandler);
    }

    return function () {
      if (ref && ref.current) {
        // console.log(`remove event listener ${log} - ref`);
        ref.current.removeEventListener('keydown', downHandler);
      } else {
        // console.log(`remove event listener ${log} - window`);
        window.removeEventListener('keydown', downHandler);
      }
    };
  });
};

exports.useKeyPress = useKeyPress;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvY29tcG9uZW50cy91dGlscy91c2VLZXlQcmVzcy50cyJdLCJuYW1lcyI6WyJ1c2VLZXlQcmVzcyIsInRhcmdldEtleSIsImZuIiwib3B0aW9ucyIsInJlZiIsImhhc093blByb3BlcnR5IiwiaWQiLCJ3aXRoTW9kaWZpZXIiLCJ3aXRoU2hpZnQiLCJpc0FjdGl2ZSIsImRvd25IYW5kbGVyIiwiZXZlbnQiLCJrZXkiLCJrZXlDb2RlIiwidGFyZ2V0IiwiZ2V0QXR0cmlidXRlIiwiY3RybEtleSIsIm1ldGFLZXkiLCJ0ZXN0Iiwic2hpZnRLZXkiLCJjdXJyZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsIndpbmRvdyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQzs7QUFFTSxJQUFNQSxXQUFXLEdBQUcsU0FBZEEsV0FBYyxDQUFDQyxTQUFELEVBQWlCQyxFQUFqQixFQUEwQkMsT0FBMUIsRUFBNEM7QUFDckUsd0JBQVUsWUFBTTtBQUNkLFFBQU1DLEdBQUcsR0FBSUQsT0FBTyxJQUFJQSxPQUFPLENBQUNFLGNBQVIsQ0FBdUIsS0FBdkIsQ0FBWixHQUE2Q0YsT0FBTyxDQUFDQyxHQUFyRCxHQUEyRCxJQUF2RTtBQUNBLFFBQU1FLEVBQUUsR0FBSUgsT0FBTyxJQUFJQSxPQUFPLENBQUNFLGNBQVIsQ0FBdUIsSUFBdkIsQ0FBWixHQUE0Q0YsT0FBTyxDQUFDRyxFQUFwRCxHQUF5RCxJQUFwRTtBQUNBLFFBQU1DLFlBQVksR0FBSUosT0FBTyxJQUFJQSxPQUFPLENBQUNFLGNBQVIsQ0FBdUIsY0FBdkIsQ0FBWixHQUFzREYsT0FBTyxDQUFDSSxZQUE5RCxHQUE2RSxLQUFsRztBQUNBLFFBQU1DLFNBQVMsR0FBSUwsT0FBTyxJQUFJQSxPQUFPLENBQUNFLGNBQVIsQ0FBdUIsV0FBdkIsQ0FBWixHQUFtREYsT0FBTyxDQUFDSyxTQUEzRCxHQUF1RSxLQUF6RjtBQUNBLFFBQU1DLFFBQVEsR0FBSU4sT0FBTyxJQUFJQSxPQUFPLENBQUNFLGNBQVIsQ0FBdUIsVUFBdkIsQ0FBWixHQUFrREYsT0FBTyxDQUFDTSxRQUExRCxHQUFxRSxJQUF0RixDQUxjLENBTWQ7O0FBRUEsUUFBSUEsUUFBUSxLQUFLLEtBQWpCLEVBQXdCO0FBQ3RCO0FBQ0Q7O0FBQ0QsYUFBU0MsV0FBVCxDQUFxQkMsS0FBckIsRUFBaUM7QUFBQSxVQUN2QkMsR0FEdUIsR0FDTkQsS0FETSxDQUN2QkMsR0FEdUI7QUFBQSxVQUNsQkMsT0FEa0IsR0FDTkYsS0FETSxDQUNsQkUsT0FEa0I7O0FBRS9CLFVBQUlQLEVBQUUsSUFBSUssS0FBSyxDQUFDRyxNQUFOLENBQWFDLFlBQWIsQ0FBMEIsSUFBMUIsTUFBb0NULEVBQTlDLEVBQWtEO0FBQ2hEO0FBQ0Q7O0FBQ0QsVUFBSSxDQUFDQyxZQUFELEtBQWtCSSxLQUFLLENBQUNLLE9BQU4sSUFBaUJMLEtBQUssQ0FBQ00sT0FBekMsQ0FBSixFQUF1RDtBQUNyRDtBQUNBO0FBQ0Q7O0FBQ0QsVUFDRyxPQUFPaEIsU0FBUCxLQUFxQixRQUFyQixJQUFpQ1csR0FBRyxLQUFLWCxTQUExQyxJQUNDLE9BQU9BLFNBQVAsS0FBcUIsUUFBckIsSUFBaUNZLE9BQU8sS0FBS1osU0FEOUMsSUFFQ0EsU0FBUyxDQUFDaUIsSUFBVixJQUFrQmpCLFNBQVMsQ0FBQ2lCLElBQVYsQ0FBZU4sR0FBZixDQUhyQixFQUcyQztBQUN2QyxZQUFJTCxZQUFZLElBQUksQ0FBQ0MsU0FBckIsRUFBZ0M7QUFDOUIsY0FBSSxDQUFDRyxLQUFLLENBQUNLLE9BQU4sSUFBaUJMLEtBQUssQ0FBQ00sT0FBeEIsS0FBb0MsQ0FBQ04sS0FBSyxDQUFDUSxRQUEvQyxFQUF5RDtBQUN2RGpCLFlBQUFBLEVBQUUsQ0FBQ1MsS0FBRCxDQUFGO0FBQ0Q7QUFDRixTQUpELE1BSU8sSUFBSSxDQUFDSixZQUFELElBQWlCQyxTQUFyQixFQUFnQztBQUNyQyxjQUFJLENBQUNHLEtBQUssQ0FBQ0ssT0FBUCxJQUFrQixDQUFDTCxLQUFLLENBQUNNLE9BQXpCLElBQW9DTixLQUFLLENBQUNRLFFBQTlDLEVBQXdEO0FBQ3REakIsWUFBQUEsRUFBRSxDQUFDUyxLQUFELENBQUY7QUFDRDtBQUNGLFNBSk0sTUFJQSxJQUFJSixZQUFZLElBQUlDLFNBQXBCLEVBQStCO0FBQ3BDLGNBQUksQ0FBQ0csS0FBSyxDQUFDSyxPQUFOLElBQWlCTCxLQUFLLENBQUNNLE9BQXhCLEtBQW9DTixLQUFLLENBQUNRLFFBQTlDLEVBQXdEO0FBQ3REakIsWUFBQUEsRUFBRSxDQUFDUyxLQUFELENBQUY7QUFDRDtBQUNGLFNBSk0sTUFJQTtBQUNMVCxVQUFBQSxFQUFFLENBQUNTLEtBQUQsQ0FBRjtBQUNEO0FBQ0o7QUFDRjs7QUFDRCxRQUFJUCxHQUFHLElBQUlBLEdBQUcsQ0FBQ2dCLE9BQWYsRUFBd0I7QUFDdEI7QUFDQWhCLE1BQUFBLEdBQUcsQ0FBQ2dCLE9BQUosQ0FBWUMsZ0JBQVosQ0FBNkIsU0FBN0IsRUFBd0NYLFdBQXhDO0FBQ0QsS0FIRCxNQUdPO0FBQ0w7QUFDQVksTUFBQUEsTUFBTSxDQUFDRCxnQkFBUCxDQUF3QixTQUF4QixFQUFtQ1gsV0FBbkM7QUFDRDs7QUFDRCxXQUFPLFlBQU07QUFDWCxVQUFJTixHQUFHLElBQUlBLEdBQUcsQ0FBQ2dCLE9BQWYsRUFBd0I7QUFDdEI7QUFDQWhCLFFBQUFBLEdBQUcsQ0FBQ2dCLE9BQUosQ0FBWUcsbUJBQVosQ0FBZ0MsU0FBaEMsRUFBMkNiLFdBQTNDO0FBQ0QsT0FIRCxNQUdPO0FBQ0w7QUFDQVksUUFBQUEsTUFBTSxDQUFDQyxtQkFBUCxDQUEyQixTQUEzQixFQUFzQ2IsV0FBdEM7QUFDRDtBQUNGLEtBUkQ7QUFTRCxHQXpERDtBQTBERCxDQTNETSIsInNvdXJjZXNDb250ZW50IjpbIiBpbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBjb25zdCB1c2VLZXlQcmVzcyA9ICh0YXJnZXRLZXk6IGFueSwgZm46IGFueSwgb3B0aW9ucz86IGFueSkgPT4ge1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHJlZiA9IChvcHRpb25zICYmIG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3JlZicpKSA/IG9wdGlvbnMucmVmIDogbnVsbDtcbiAgICBjb25zdCBpZCA9IChvcHRpb25zICYmIG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2lkJykpID8gb3B0aW9ucy5pZCA6IG51bGw7XG4gICAgY29uc3Qgd2l0aE1vZGlmaWVyID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2l0aE1vZGlmaWVyJykpID8gb3B0aW9ucy53aXRoTW9kaWZpZXIgOiBmYWxzZTtcbiAgICBjb25zdCB3aXRoU2hpZnQgPSAob3B0aW9ucyAmJiBvcHRpb25zLmhhc093blByb3BlcnR5KCd3aXRoU2hpZnQnKSkgPyBvcHRpb25zLndpdGhTaGlmdCA6IGZhbHNlO1xuICAgIGNvbnN0IGlzQWN0aXZlID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnaXNBY3RpdmUnKSkgPyBvcHRpb25zLmlzQWN0aXZlIDogdHJ1ZTtcbiAgICAvLyBjb25zdCBsb2cgPSAob3B0aW9ucyAmJiBvcHRpb25zLmhhc093blByb3BlcnR5KCdsb2cnKSkgPyBvcHRpb25zLmxvZyA6ICcnO1xuICAgIFxuICAgIGlmIChpc0FjdGl2ZSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZnVuY3Rpb24gZG93bkhhbmRsZXIoZXZlbnQ6IGFueSkge1xuICAgICAgY29uc3QgeyBrZXksIGtleUNvZGUgfSA9IGV2ZW50O1xuICAgICAgaWYgKGlkICYmIGV2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2lkJykgIT09IGlkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICghd2l0aE1vZGlmaWVyICYmIChldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkpKSB7XG4gICAgICAgIC8vIGlnbm9yZSBrZXkgY29tYmluYXRpb24gbGlrZSBjdHJsK2MvY29tbWFuZCtjIHVubGVzcyB3ZSBzcGVjaWZpY2FsbHkgYXNrZWQgdG8gdXNlIHdpdGggbW9kaWZpZXJcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICAodHlwZW9mIHRhcmdldEtleSA9PT0gJ3N0cmluZycgJiYga2V5ID09PSB0YXJnZXRLZXkpIHx8IFxuICAgICAgICAodHlwZW9mIHRhcmdldEtleSA9PT0gJ251bWJlcicgJiYga2V5Q29kZSA9PT0gdGFyZ2V0S2V5KSB8fCBcbiAgICAgICAgKHRhcmdldEtleS50ZXN0ICYmIHRhcmdldEtleS50ZXN0KGtleSkpKSB7XG4gICAgICAgICAgaWYgKHdpdGhNb2RpZmllciAmJiAhd2l0aFNoaWZ0KSB7XG4gICAgICAgICAgICBpZiAoKGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSkgJiYgIWV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgIGZuKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKCF3aXRoTW9kaWZpZXIgJiYgd2l0aFNoaWZ0KSB7XG4gICAgICAgICAgICBpZiAoIWV2ZW50LmN0cmxLZXkgJiYgIWV2ZW50Lm1ldGFLZXkgJiYgZXZlbnQuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgICAgZm4oZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAod2l0aE1vZGlmaWVyICYmIHdpdGhTaGlmdCkge1xuICAgICAgICAgICAgaWYgKChldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkpICYmIGV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgIGZuKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm4oZXZlbnQpO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHJlZiAmJiByZWYuY3VycmVudCkge1xuICAgICAgLy8gY29uc29sZS5sb2coYGFkZCBldmVudCBsaXN0ZW5lciAke2xvZ30gLSByZWZgKTtcbiAgICAgIHJlZi5jdXJyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBkb3duSGFuZGxlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKGBhZGQgZXZlbnQgbGlzdGVuZXIgJHtsb2d9IC0gd2luZG93YCk7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGRvd25IYW5kbGVyKTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmIChyZWYgJiYgcmVmLmN1cnJlbnQpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coYHJlbW92ZSBldmVudCBsaXN0ZW5lciAke2xvZ30gLSByZWZgKTtcbiAgICAgICAgcmVmLmN1cnJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGRvd25IYW5kbGVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGByZW1vdmUgZXZlbnQgbGlzdGVuZXIgJHtsb2d9IC0gd2luZG93YCk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZG93bkhhbmRsZXIpO1xuICAgICAgfVxuICAgIH07XG4gIH0pO1xufTsiXX0=